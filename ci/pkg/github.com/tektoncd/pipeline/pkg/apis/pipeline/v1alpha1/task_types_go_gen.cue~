// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1

package v1alpha1

// TaskSpec defines the desired state of Task.
TaskSpec :: {
	// Inputs is an optional set of parameters and resources which must be
	// supplied by the user when a Task is executed by a TaskRun.
	// +optional
	inputs?: null | Inputs @go(Inputs,*Inputs)

	// Outputs is an optional set of resources and results produced when this
	// Task is run.
	// +optional
	outputs?: null | Outputs @go(Outputs,*Outputs)

	// Steps are the steps of the build; each step is run sequentially with the
	// source mounted into /workspace.
	steps?: [...Step] @go(Steps,[]Step)

	// Volumes is a collection of volumes that are available to mount into the
	// steps of the build.
	volumes?: [...Volume] @go(Volumes,[]github.com/tektoncd/pipeline/vendor/corev1.Volume)

	// StepTemplate can be used as the basis for all step containers within the
	// Task, so that the steps inherit settings on the base container.
	stepTemplate?: null | Container @go(StepTemplate,*github.com/tektoncd/pipeline/vendor/corev1.Container)

	// Sidecars are run alongside the Task's step containers. They begin before
	// the steps start and end after the steps complete.
	sidecars?: [...Container] @go(Sidecars,[]github.com/tektoncd/pipeline/vendor/corev1.Container)
}

// Step embeds the Container type, which allows it to include fields not
// provided by Container.
Step :: {
	Container: Container @go(,github.com/tektoncd/pipeline/vendor/corev1.Container)
}

// TaskOutputImageDefaultDir is the default directory for output image resource,
TaskOutputImageDefaultDir :: "/builder/home/image-outputs"

// Task represents a collection of sequential steps that are run as part of a
// Pipeline using a set of inputs and producing a set of outputs. Tasks execute
// when TaskRuns are created that provide the input parameters and resources and
// output resources the Task requires.
//
// +k8s:openapi-gen=true
Task :: {
	TypeMeta

	// +optional
	metadata: ObjectMeta @go(ObjectMeta,github.com/tektoncd/pipeline/vendor/metav1.ObjectMeta)

	// Spec holds the desired state of the Task from the client
	// +optional
	spec: TaskSpec @go(Spec)
}

// Inputs are the requirements that a task needs to run a Build.
Inputs :: {
	// Resources is a list of the input resources required to run the task.
	// Resources are represented in TaskRuns as bindings to instances of
	// PipelineResources.
	// +optional
	resources?: [...TaskResource] @go(Resources,[]TaskResource)

	// Params is a list of input parameters required to run the task. Params
	// must be supplied as inputs in TaskRuns unless they declare a default
	// value.
	// +optional
	params?: [...ParamSpec] @go(Params,[]ParamSpec)
}

// TaskResource defines an input or output Resource declared as a requirement
// by a Task. The Name field will be used to refer to these Resources within
// the Task definition, and when provided as an Input, the Name will be the
// path to the volume mounted containing this Resource as an input (e.g.
// an input Resource named `workspace` will be mounted at `/workspace`).
TaskResource :: {
	ResourceDeclaration: ResourceDeclaration

	// +optional
	outputImageDir?: string @go(OutputImageDir)
}

// Outputs allow a task to declare what data the Build/Task will be producing,
// i.e. results such as logs and artifacts such as images.
Outputs :: {
	// +optional
	results?: [...TestResult] @go(Results,[]TestResult)

	// +optional
	resources?: [...TaskResource] @go(Resources,[]TaskResource)
}

// TestResult allows a task to specify the location where test logs
// can be found and what format they will be in.
TestResult :: {
	// Name declares the name by which a result is referenced in the Task's
	// definition. Results may be referenced by name in the definition of a
	// Task's steps.
	name: string @go(Name)

	// TODO: maybe this is an enum with types like "go test", "junit", etc.
	format: string @go(Format)
	path:   string @go(Path)
}

// TaskList contains a list of Task
TaskList :: {
	TypeMeta

	// +optional
	metadata?: ListMeta @go(ListMeta,github.com/tektoncd/pipeline/vendor/metav1.ListMeta)
	items: [...Task] @go(Items,[]Task)
}
