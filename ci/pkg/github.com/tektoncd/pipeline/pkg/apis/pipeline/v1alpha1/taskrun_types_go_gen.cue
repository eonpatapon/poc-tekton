// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1

package v1alpha1

// TaskRunSpec defines the desired state of TaskRun
TaskRunSpec :: {
	// +optional
	inputs?: TaskRunInputs @go(Inputs)

	// +optional
	outputs?: TaskRunOutputs @go(Outputs)

	// Deprecation Notice: The field Results will be removed in v0.8.0
	// and should not be used. Plan to have this field removed before upgradring
	// to v0.8.0.
	// +optional
	results?: null | Results @go(Results,*Results)

	// +optional
	serviceAccount?: string @go(ServiceAccount)

	// no more than one of the TaskRef and TaskSpec may be specified.
	// +optional
	taskRef?: null | TaskRef @go(TaskRef,*TaskRef)

	// +optional
	taskSpec?: null | TaskSpec @go(TaskSpec,*TaskSpec)

	// Used for cancelling a taskrun (and maybe more later on)
	// +optional
	status?: TaskRunSpecStatus @go(Status)

	// Time after which the build times out. Defaults to 10 minutes.
	// Specified build timeout should be less than 24h.
	// Refer Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration
	// +optional
	timeout?: null | Duration @go(Timeout,*github.com/tektoncd/pipeline/vendor/metav1.Duration)

	// PodTemplate holds pod specific configuration
	podTemplate?: PodTemplate @go(PodTemplate)
}

// TaskRunSpecStatus defines the taskrun spec status the user can provide
TaskRunSpecStatus :: string

// TaskRunSpecStatusCancelled indicates that the user wants to cancel the task,
// if not already cancelled or terminated
TaskRunSpecStatusCancelled :: "TaskRunCancelled"

// TaskRunInputs holds the input values that this task was invoked with.
TaskRunInputs :: {
	// +optional
	resources?: [...TaskResourceBinding] @go(Resources,[]TaskResourceBinding)

	// +optional
	params?: [...Param] @go(Params,[]Param)
}

// TaskResourceBinding points to the PipelineResource that
// will be used for the Task input or output called Name. The optional Path field
// corresponds to a path on disk at which the Resource can be found (used when providing
// the resource via mounted volume, overriding the default logic to fetch the Resource).
TaskResourceBinding :: {
	name: string @go(Name)

	// no more than one of the ResourceRef and ResourceSpec may be specified.
	// +optional
	resourceRef?: PipelineResourceRef @go(ResourceRef)

	// +optional
	resourceSpec?: null | PipelineResourceSpec @go(ResourceSpec,*PipelineResourceSpec)

	// +optional
	paths?: [...string] @go(Paths,[]string)
}

// TaskRunOutputs holds the output values that this task was invoked with.
TaskRunOutputs :: {
	// +optional
	resources?: [...TaskResourceBinding] @go(Resources,[]TaskResourceBinding)
}

// TaskRunStatus defines the observed state of TaskRun
TaskRunStatus :: {
	Status

	// Deprecation Notice: The field Results will be removed in v0.8.0
	// and should not be used. Plan to have this field removed before upgradring
	// to v0.8.0.
	// +optional
	results?: null | Results @go(Results,*Results)

	// PodName is the name of the pod responsible for executing this task's steps.
	podName: string @go(PodName)

	// StartTime is the time the build is actually started.
	// +optional
	startTime?: null | Time @go(StartTime,*github.com/tektoncd/pipeline/vendor/metav1.Time)

	// CompletionTime is the time the build completed.
	// +optional
	completionTime?: null | Time @go(CompletionTime,*github.com/tektoncd/pipeline/vendor/metav1.Time)

	// Steps describes the state of each build step container.
	// +optional
	steps?: [...StepState] @go(Steps,[]StepState)

	// CloudEvents describe the state of each cloud event requested via a
	// CloudEventResource.
	// +optional
	cloudEvents?: [...CloudEventDelivery] @go(CloudEvents,[]CloudEventDelivery)

	// RetriesStatus contains the history of TaskRunStatus in case of a retry in order to keep record of failures.
	// All TaskRunStatus stored in RetriesStatus will have no date within the RetriesStatus as is redundant.
	// +optional
	retriesStatus?: [...TaskRunStatus] @go(RetriesStatus,[]TaskRunStatus)

	// Results from Resources built during the taskRun. currently includes
	// the digest of build container images
	// optional
	resourcesResult?: [...PipelineResourceResult] @go(ResourcesResult,[]PipelineResourceResult)
}

// StepState reports the results of running a step in the Task.
StepState :: {
	ContainerState: ContainerState @go(,github.com/tektoncd/pipeline/vendor/corev1.ContainerState)
	name?:          string         @go(Name)
	container?:     string         @go(ContainerName)
	imageID?:       string         @go(ImageID)
}

// CloudEventDelivery is the target of a cloud event along with the state of
// delivery.
CloudEventDelivery :: {
	// Target points to an addressable
	target?: string                  @go(Target)
	status?: CloudEventDeliveryState @go(Status)
}

// CloudEventCondition is a string that represents the condition of the event.
CloudEventCondition :: string // enumCloudEventCondition

enumCloudEventCondition ::
	CloudEventConditionUnknown |
	CloudEventConditionSent |
	CloudEventConditionFailed

// CloudEventConditionUnknown means that the condition for the event to be
// triggered was not met yet, or we don't know the state yet.
CloudEventConditionUnknown :: CloudEventCondition & "Unknown"

// CloudEventConditionSent means that the event was sent successfully
CloudEventConditionSent :: CloudEventCondition & "Sent"

// CloudEventConditionFailed means that there was one or more attempts to
// send the event, and none was successful so far.
CloudEventConditionFailed :: CloudEventCondition & "Failed"

// CloudEventDeliveryState reports the state of a cloud event to be sent.
CloudEventDeliveryState :: {
	// Current status
	condition?: CloudEventCondition @go(Condition)

	// SentAt is the time at which the last attempt to send the event was made
	// +optional
	sentAt?: null | Time @go(SentAt,*github.com/tektoncd/pipeline/vendor/metav1.Time)

	// Error is the text of error (if any)
	message: string @go(Error)

	// RetryCount is the number of attempts of sending the cloud event
	retryCount: int32 @go(RetryCount)
}

// TaskRun represents a single execution of a Task. TaskRuns are how the steps
// specified in a Task are executed; they specify the parameters and resources
// used to run the steps in a Task.
//
// +k8s:openapi-gen=true
TaskRun :: {
	TypeMeta

	// +optional
	metadata?: ObjectMeta @go(ObjectMeta,github.com/tektoncd/pipeline/vendor/metav1.ObjectMeta)

	// +optional
	spec?: TaskRunSpec @go(Spec)

	// +optional
	status?: TaskRunStatus @go(Status)
}

// TaskRunList contains a list of TaskRun
TaskRunList :: {
	TypeMeta

	// +optional
	metadata?: ListMeta @go(ListMeta,github.com/tektoncd/pipeline/vendor/metav1.ListMeta)
	items: [...TaskRun] @go(Items,[]TaskRun)
}
