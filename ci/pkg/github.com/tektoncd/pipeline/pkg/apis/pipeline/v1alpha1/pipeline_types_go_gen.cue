// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1

package v1alpha1

// PipelineSpec defines the desired state of Pipeline.
PipelineSpec :: {
	// Resources declares the names and types of the resources given to the
	// Pipeline's tasks as inputs and outputs.
	resources?: [...PipelineDeclaredResource] @go(Resources,[]PipelineDeclaredResource)

	// Tasks declares the graph of Tasks that execute when this Pipeline is run.
	tasks?: [...PipelineTask] @go(Tasks,[]PipelineTask)

	// Params declares a list of input parameters that must be supplied when
	// this Pipeline is run.
	params?: [...ParamSpec] @go(Params,[]ParamSpec)
}

// PipelineStatus does not contain anything because Pipelines on their own
// do not have a status, they just hold data which is later used by a
// PipelineRun.
PipelineStatus :: {
}

// TaskKind defines the type of Task used by the pipeline.
TaskKind :: string // enumTaskKind

enumTaskKind ::
	NamespacedTaskKind |
	ClusterTaskKind

// NamespacedTaskKind indicates that the task type has a namepace scope.
NamespacedTaskKind :: TaskKind & "Task"

// ClusterTaskKind indicates that task type has a cluster scope.
ClusterTaskKind :: TaskKind & "ClusterTask"

// Pipeline describes a list of Tasks to execute. It expresses how outputs
// of tasks feed into inputs of subsequent tasks.
// +k8s:openapi-gen=true
Pipeline :: {
	TypeMeta

	// +optional
	metadata?: ObjectMeta @go(ObjectMeta,github.com/tektoncd/pipeline/vendor/metav1.ObjectMeta)

	// Spec holds the desired state of the Pipeline from the client
	// +optional
	spec: PipelineSpec @go(Spec)

	// Status communicates the observed state of the Pipeline from the
	// controller.
	// +optional
	status: PipelineStatus @go(Status)
}

// PipelineTask defines a task in a Pipeline, passing inputs from both
// Params and from the output of previous tasks.
PipelineTask :: {
	// Name is the name of this task within the context of a Pipeline. Name is
	// used as a coordinate with the `from` and `runAfter` fields to establish
	// the execution order of tasks relative to one another.
	name?: string @go(Name)

	// TaskRef is a reference to a task definition.
	taskRef: TaskRef @go(TaskRef)

	// Conditions is a list of conditions that need to be true for the task to run
	// +optional
	conditions?: [...PipelineTaskCondition] @go(Conditions,[]PipelineTaskCondition)

	// Retries represents how many times this task should be retried in case of task failure: ConditionSucceeded set to False
	// +optional
	retries?: int @go(Retries)

	// RunAfter is the list of PipelineTask names that should be executed before
	// this Task executes. (Used to force a specific ordering in graph execution.)
	// +optional
	runAfter?: [...string] @go(RunAfter,[]string)

	// Resources declares the resources given to this task as inputs and
	// outputs.
	// +optional
	resources?: null | PipelineTaskResources @go(Resources,*PipelineTaskResources)

	// Parameters declares parameters passed to this task.
	// +optional
	params?: [...Param] @go(Params,[]Param)
}

// PipelineTaskParam is used to provide arbitrary string parameters to a Task.
PipelineTaskParam :: {
	name:  string @go(Name)
	value: string @go(Value)
}

// PipelineTaskCondition allows a PipelineTask to declare a Condition to be evaluated before
// the Task is run.
PipelineTaskCondition :: {
	// ConditionRef is the name of the Condition to use for the conditionCheck
	conditionRef: string @go(ConditionRef)

	// Params declare parameters passed to this Condition
	// +optional
	params?: [...Param] @go(Params,[]Param)

	// Resources declare the resources provided to this Condition as input
	resources?: [...PipelineConditionResource] @go(Resources,[]PipelineConditionResource)
}

// PipelineDeclaredResource is used by a Pipeline to declare the types of the
// PipelineResources that it will required to run and names which can be used to
// refer to these PipelineResources in PipelineTaskResourceBindings.
PipelineDeclaredResource :: {
	// Name is the name that will be used by the Pipeline to refer to this resource.
	// It does not directly correspond to the name of any PipelineResources Task
	// inputs or outputs, and it does not correspond to the actual names of the
	// PipelineResources that will be bound in the PipelineRun.
	name: string @go(Name)

	// Type is the type of the PipelineResource.
	type: PipelineResourceType @go(Type)
}

// PipelineConditionResource allows a Pipeline to declare how its DeclaredPipelineResources
// should be provided to a Condition as its inputs.
PipelineConditionResource :: {
	// Name is the name of the PipelineResource as declared by the Condition.
	name: string @go(Name)

	// Resource is the name of the DeclaredPipelineResource to use.
	resource: string @go(Resource)
}

// PipelineTaskResources allows a Pipeline to declare how its DeclaredPipelineResources
// should be provided to a Task as its inputs and outputs.
PipelineTaskResources :: {
	// Inputs holds the mapping from the PipelineResources declared in
	// DeclaredPipelineResources to the input PipelineResources required by the Task.
	inputs?: [...PipelineTaskInputResource] @go(Inputs,[]PipelineTaskInputResource)

	// Outputs holds the mapping from the PipelineResources declared in
	// DeclaredPipelineResources to the input PipelineResources required by the Task.
	outputs?: [...PipelineTaskOutputResource] @go(Outputs,[]PipelineTaskOutputResource)
}

// PipelineTaskInputResource maps the name of a declared PipelineResource input
// dependency in a Task to the resource in the Pipeline's DeclaredPipelineResources
// that should be used. This input may come from a previous task.
PipelineTaskInputResource :: {
	// Name is the name of the PipelineResource as declared by the Task.
	name: string @go(Name)

	// Resource is the name of the DeclaredPipelineResource to use.
	resource: string @go(Resource)

	// From is the list of PipelineTask names that the resource has to come from.
	// (Implies an ordering in the execution graph.)
	// +optional
	from?: [...string] @go(From,[]string)
}

// PipelineTaskOutputResource maps the name of a declared PipelineResource output
// dependency in a Task to the resource in the Pipeline's DeclaredPipelineResources
// that should be used.
PipelineTaskOutputResource :: {
	// Name is the name of the PipelineResource as declared by the Task.
	name: string @go(Name)

	// Resource is the name of the DeclaredPipelienResource to use.
	resource: string @go(Resource)
}

// TaskRef can be used to refer to a specific instance of a task.
// Copied from CrossVersionObjectReference: https://github.com/kubernetes/kubernetes/blob/169df7434155cbbc22f1532cba8e0a9588e29ad8/pkg/apis/autoscaling/types.go#L64
TaskRef :: {
	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	name?: string @go(Name)

	// TaskKind inficates the kind of the task, namespaced or cluster scoped.
	kind?: TaskKind @go(Kind)

	// API version of the referent
	// +optional
	apiVersion?: string @go(APIVersion)
}

// PipelineList contains a list of Pipeline
PipelineList :: {
	TypeMeta

	// +optional
	metadata?: ListMeta @go(ListMeta,github.com/tektoncd/pipeline/vendor/metav1.ListMeta)
	items: [...Pipeline] @go(Items,[]Pipeline)
}
