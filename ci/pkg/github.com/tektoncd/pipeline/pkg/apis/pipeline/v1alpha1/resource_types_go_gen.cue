// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1

package v1alpha1

// PipelineResourceType represents the type of endpoint the pipelineResource is, so that the
// controller will know this pipelineResource should be fetched and optionally what
// additional metatdata should be provided for it.
PipelineResourceType :: string // enumPipelineResourceType

enumPipelineResourceType ::
	PipelineResourceTypeGit |
	PipelineResourceTypeStorage |
	PipelineResourceTypeImage |
	PipelineResourceTypeCluster |
	PipelineResourceTypePullRequest |
	PipelineResourceTypeCloudEvent |
	PipelineResourceTypeGCS |
	PipelineResourceTypeBuildGCS

// PipelineResourceTypeGit indicates that this source is a GitHub repo.
PipelineResourceTypeGit :: PipelineResourceType & "git"

// PipelineResourceTypeStorage indicates that this source is a storage blob resource.
PipelineResourceTypeStorage :: PipelineResourceType & "storage"

// PipelineResourceTypeImage indicates that this source is a docker Image.
PipelineResourceTypeImage :: PipelineResourceType & "image"

// PipelineResourceTypeCluster indicates that this source is a k8s cluster Image.
PipelineResourceTypeCluster :: PipelineResourceType & "cluster"

// PipelineResourceTypePullRequest indicates that this source is a SCM Pull Request.
PipelineResourceTypePullRequest :: PipelineResourceType & "pullRequest"

// PipelineResourceTypeCloudEvent indicates that this source is a cloud event URI
PipelineResourceTypeCloudEvent :: PipelineResourceType & "cloudEvent"

// PipelineResourceInterface interface to be implemented by different PipelineResource types
PipelineResourceInterface :: _

// TaskModifier is an interface to be implemented by different PipelineResources
TaskModifier :: _

// InternalTaskModifier implements TaskModifier for resources that are built-in to Tekton Pipelines.
InternalTaskModifier :: {
	StepsToPrepend: [...Step] @go(,[]Step)
	StepsToAppend: [...Step] @go(,[]Step)
	Volumes: [...Volume] @go(,[]github.com/tektoncd/pipeline/vendor/v1.Volume)
}

// SecretParam indicates which secret can be used to populate a field of the resource
SecretParam :: {
	fieldName:  string @go(FieldName)
	secretKey:  string @go(SecretKey)
	secretName: string @go(SecretName)
}

// PipelineResourceSpec defines  an individual resources used in the pipeline.
PipelineResourceSpec :: {
	type: PipelineResourceType @go(Type)
	params: [...ResourceParam] @go(Params,[]ResourceParam)

	// Secrets to fetch to populate some of resource fields
	// +optional
	secrets?: [...SecretParam] @go(SecretParams,[]SecretParam)
}

// PipelineResourceStatus does not contain anything because Resources on their own
// do not have a status, they just hold data which is later used by PipelineRuns
// and TaskRuns.
PipelineResourceStatus :: {
}

// PipelineResource describes a resource that is an input to or output from a
// Task.
//
// +k8s:openapi-gen=true
PipelineResource :: {
	TypeMeta

	// +optional
	metadata?: ObjectMeta @go(ObjectMeta,github.com/tektoncd/pipeline/vendor/metav1.ObjectMeta)

	// Spec holds the desired state of the PipelineResource from the client
	// +optional
	spec?: PipelineResourceSpec @go(Spec)

	// Status communicates the observed state of the PipelineResource from the controller
	// +optional
	status?: PipelineResourceStatus @go(Status)
}

// PipelineResourceBinding connects a reference to an instance of a PipelineResource
// with a PipelineResource dependency that the Pipeline has declared
PipelineResourceBinding :: {
	// Name is the name of the PipelineResource in the Pipeline's declaration
	name?: string @go(Name)

	// ResourceRef is a reference to the instance of the actual PipelineResource
	// that should be used
	resourceRef?: PipelineResourceRef @go(ResourceRef)

	// +optional
	// ResourceSpec is specification of a resource that should be created and
	// consumed by the task
	resourceSpec?: null | PipelineResourceSpec @go(ResourceSpec,*PipelineResourceSpec)
}

// PipelineResourceResult used to export the image name and digest as json
PipelineResourceResult :: {
	name:   string @go(Name)
	digest: string @go(Digest)
}

// PipelineResourceList contains a list of PipelineResources
PipelineResourceList :: {
	TypeMeta

	// +optional
	metadata?: ListMeta @go(ListMeta,github.com/tektoncd/pipeline/vendor/metav1.ListMeta)
	items: [...PipelineResource] @go(Items,[]PipelineResource)
}

// ResourceDeclaration defines an input or output PipelineResource declared as a requirement
// by another type such as a Task or Condition. The Name field will be used to refer to these
// PipelineResources within the type's definition, and when provided as an Input, the Name will be the
// path to the volume mounted containing this PipelineResource as an input (e.g.
// an input Resource named `workspace` will be mounted at `/workspace`).
ResourceDeclaration :: {
	// Name declares the name by which a resource is referenced in the
	// definition. Resources may be referenced by name in the definition of a
	// Task's steps.
	name: string @go(Name)

	// Type is the type of this resource;
	type: PipelineResourceType @go(Type)

	// TargetPath is the path in workspace directory where the resource
	// will be copied.
	// +optional
	targetPath?: string @go(TargetPath)
}
