// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1

package v1alpha1

// PipelineRunSpec defines the desired state of PipelineRun
PipelineRunSpec :: {
	pipelineRef: PipelineRef @go(PipelineRef)

	// Resources is a list of bindings specifying which actual instances of
	// PipelineResources to use for the resources the Pipeline has declared
	// it needs.
	resources?: [...PipelineResourceBinding] @go(Resources,[]PipelineResourceBinding)

	// Params is a list of parameter names and values.
	params?: [...Param] @go(Params,[]Param)

	// +optional
	serviceAccount: string @go(ServiceAccount)

	// +optional
	serviceAccounts?: [...PipelineRunSpecServiceAccount] @go(ServiceAccounts,[]PipelineRunSpecServiceAccount)

	// Deprecation Notice: The field Results will be removed in v0.8.0
	// and should not be used. Plan to have this field removed before upgradring
	// to v0.8.0.
	// +optional
	results?: null | Results @go(Results,*Results)

	// Used for cancelling a pipelinerun (and maybe more later on)
	// +optional
	status?: PipelineRunSpecStatus @go(Status)

	// Time after which the Pipeline times out. Defaults to never.
	// Refer to Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration
	// +optional
	timeout?: null | Duration @go(Timeout,*github.com/tektoncd/pipeline/vendor/metav1.Duration)

	// PodTemplate holds pod specific configuration
	podTemplate?: PodTemplate @go(PodTemplate)
}

// PipelineRunSpecStatus defines the pipelinerun spec status the user can provide
PipelineRunSpecStatus :: string

// PipelineRunSpecStatusCancelled indicates that the user wants to cancel the task,
// if not already cancelled or terminated
PipelineRunSpecStatusCancelled :: "PipelineRunCancelled"

// PipelineResourceRef can be used to refer to a specific instance of a Resource
PipelineResourceRef :: {
	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	name?: string @go(Name)

	// API version of the referent
	// +optional
	apiVersion?: string @go(APIVersion)
}

// PipelineRef can be used to refer to a specific instance of a Pipeline.
// Copied from CrossVersionObjectReference: https://github.com/kubernetes/kubernetes/blob/169df7434155cbbc22f1532cba8e0a9588e29ad8/pkg/apis/autoscaling/types.go#L64
PipelineRef :: {
	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	name?: string @go(Name)

	// API version of the referent
	// +optional
	apiVersion?: string @go(APIVersion)
}

// PipelineRunStatus defines the observed state of PipelineRun
PipelineRunStatus :: {
	Status

	// Deprecation Notice: The field Results will be removed in v0.8.0
	// and should not be used. Plan to have this field removed before upgradring
	// to v0.8.0.
	// +optional
	results?: null | Results @go(Results,*Results)

	// StartTime is the time the PipelineRun is actually started.
	// +optional
	startTime?: null | Time @go(StartTime,*github.com/tektoncd/pipeline/vendor/metav1.Time)

	// CompletionTime is the time the PipelineRun completed.
	// +optional
	completionTime?: null | Time @go(CompletionTime,*github.com/tektoncd/pipeline/vendor/metav1.Time)

	// map of PipelineRunTaskRunStatus with the taskRun name as the key
	// +optional
	taskRuns?: {<_>: null | PipelineRunTaskRunStatus} @go(TaskRuns,map[string]*PipelineRunTaskRunStatus)
}

// PipelineRunTaskRunStatus contains the name of the PipelineTask for this TaskRun and the TaskRun's Status
PipelineRunTaskRunStatus :: {
	// PipelineTaskName is the name of the PipelineTask.
	pipelineTaskName?: string @go(PipelineTaskName)

	// Status is the TaskRunStatus for the corresponding TaskRun
	// +optional
	status?: null | TaskRunStatus @go(Status,*TaskRunStatus)

	// ConditionChecks maps the name of a condition check to its Status
	// +optional
	conditionChecks?: {<_>: null | PipelineRunConditionCheckStatus} @go(ConditionChecks,map[string]*PipelineRunConditionCheckStatus)
}

PipelineRunConditionCheckStatus :: {
	// ConditionName is the name of the Condition
	conditionName?: string @go(ConditionName)

	// Status is the ConditionCheckStatus for the corresponding ConditionCheck
	// +optional
	status?: null | ConditionCheckStatus @go(Status,*ConditionCheckStatus)
}

// PipelineRunSpecServiceAccount can be used to configure specific ServiceAccount for a concrete Task
PipelineRunSpecServiceAccount :: {
	taskName?:       string @go(TaskName)
	serviceAccount?: string @go(ServiceAccount)
}

// PipelineRun represents a single execution of a Pipeline. PipelineRuns are how
// the graph of Tasks declared in a Pipeline are executed; they specify inputs
// to Pipelines such as parameter values and capture operational aspects of the
// Tasks execution such as service account and tolerations. Creating a
// PipelineRun creates TaskRuns for Tasks in the referenced Pipeline.
//
// +k8s:openapi-gen=true
PipelineRun :: {
	TypeMeta

	// +optional
	metadata?: ObjectMeta @go(ObjectMeta,github.com/tektoncd/pipeline/vendor/metav1.ObjectMeta)

	// +optional
	spec?: PipelineRunSpec @go(Spec)

	// +optional
	status?: PipelineRunStatus @go(Status)
}

// PipelineRunList contains a list of PipelineRun
PipelineRunList :: {
	TypeMeta

	// +optional
	metadata?: ListMeta @go(ListMeta,github.com/tektoncd/pipeline/vendor/metav1.ListMeta)
	items?: [...PipelineRun] @go(Items,[]PipelineRun)
}

// PipelineTaskRun reports the results of running a step in the Task. Each
// task has the potential to succeed or fail (based on the exit code)
// and produces logs.
PipelineTaskRun :: {
	name?: string @go(Name)
}
