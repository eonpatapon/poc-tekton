// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1

package v1alpha1

// Condition declares a step that is used to gate the execution of a Task in a Pipeline.
// A condition execution (ConditionCheck) evaluates to either true or false
// +k8s:openapi-gen=true
Condition :: {
	TypeMeta

	// +optional
	metadata: ObjectMeta @go(ObjectMeta,github.com/tektoncd/pipeline/vendor/metav1.ObjectMeta)

	// Spec holds the desired state of the Condition from the client
	// +optional
	spec: ConditionSpec @go(Spec)
}

// ConditionCheckStatus defines the observed state of ConditionCheck
ConditionCheckStatus :: {
	Status

	// PodName is the name of the pod responsible for executing this condition check.
	podName: string @go(PodName)

	// StartTime is the time the check is actually started.
	// +optional
	startTime?: null | Time @go(StartTime,*github.com/tektoncd/pipeline/vendor/metav1.Time)

	// CompletionTime is the time the check pod completed.
	// +optional
	completionTime?: null | Time @go(CompletionTime,*github.com/tektoncd/pipeline/vendor/metav1.Time)

	// Check describes the state of the check container.
	// +optional
	check?: ContainerState @go(Check,github.com/tektoncd/pipeline/vendor/corev1.ContainerState)
}

// ConditionSpec defines the desired state of the Condition
ConditionSpec :: {
	// Check declares container whose exit code determines where a condition is true or false
	check?: Container @go(Check,github.com/tektoncd/pipeline/vendor/corev1.Container)

	// Params is an optional set of parameters which must be supplied by the user when a Condition
	// is evaluated
	// +optional
	params?: [...ParamSpec] @go(Params,[]ParamSpec)

	// Resources is a list of the ConditionResources required to run the condition.
	// +optional
	resources?: [...ResourceDeclaration] @go(Resources,[]ResourceDeclaration)
}

// ConditionCheck represents a single evaluation of a Condition step.
ConditionCheck :: TaskRun

// ConditionList contains a list of Conditions
ConditionList :: {
	TypeMeta

	// +optional
	metadata?: ListMeta @go(ListMeta,github.com/tektoncd/pipeline/vendor/metav1.ListMeta)
	items: [...Condition] @go(Items,[]Condition)
}
